@page "/results"

@inject AllowGuestHttpClient Http
@inject NavigationManager NavigationManager

<h1>判定結果</h1>

@if (docs == null)
{
    <p><em>Loading...</em></p>
}
else if (docs.Count == 0)
{
    <p><em>No more result.</em></p>
}
else
{
    <div class="d-flex flex-wrap">
        @foreach (var doc in docs)
        {
            <NavLink href="@($"/results/{doc.Id}")" style="margin: 4px;">
                <img src="@doc.Image.Uri" class="img-thumbnail" style="min-width: 120px; max-width: 120px;">
            </NavLink>
        }
    </div>
    if (next < DateTimeOffset.MaxValue)
    {
        <p>
            <NavLink href="@($"/results?offset={next.UtcTicks}")" class="btn btn-link" @onclick="OnNext">Next</NavLink>
        </p>
    }
}
<div>@message</div>

@code {
    ICollection<IResultDocument> docs { get; set; }
    DateTimeOffset next { get; set; }
    string message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task OnNext()
    {
        NavigationManager.NavigateTo($"/results?offset={next.UtcTicks}", true);
    }

    private async Task Load()
    {
        try
        {
            DateTimeOffset offset = DateTimeOffset.MinValue;
            try
            {

                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                if (QueryHelpers.ParseNullableQuery(uri.Query).TryGetValue("offset", out var stringOffsets))
                {
                    offset = new DateTimeOffset(long.Parse(stringOffsets.First()), TimeSpan.Zero);
                }
            }
            catch (Exception)
            {
                // ignore
            }
            docs = await Http.GetFromJsonAsync<PlainResultDocument[]>($"ResultDocument?offset={offset.UtcTicks}");
            if (docs.Count > 0)
            {
                next = docs.Max(x => x.CreatedAt);
            }
            else
            {
                next = DateTimeOffset.MaxValue;
            }
        }
        catch (Exception ex)
        {
            // XXX 500放れるといい
            message = ex.Message + " ... " + ex.StackTrace;
        }
    }
}
