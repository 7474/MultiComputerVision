@page "/upload"

@using BlazorMultiComputerVisionServer.Service
@inject IUploadService UploadService
@inject AzureImageDetectService AzureImageDetectService
@inject IResultRepositoryService ResultRepositoryService

<h1>Upload</h1>
<InputFile OnChange="HandleFileSelected" />
<div>
    <p>@Message</p>
    <dl>
        <dt>URL</dt>
        <dd>@UploadedUri</dd>
        <dt>AzureAdultScore</dt>
        <dd>@AzureAdultScore</dd>
        <dt>AzureRacyScore</dt>
        <dd>@AzureRacyScore</dd>
        <dt>Image</dt>
        <dd><img src="@UploadedUri" style="max-width: 100%" /></dd>
    </dl>
</div>

@code {
    System.IO.FileStream SelectedFileStream { set; get; }
    double PercentageProgress { set; get; }
    string UploadedUri { set; get; }
    double AzureAdultScore { set; get; }
    double AzureRacyScore { set; get; }
    string Message { get; set; }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        try
        {
            // TODO 画像サイズはノーマライズしたい
            // TODO 画像以外はアップロード駄目だろう
            // TODO ディレクトリ指定できた方が管理上良さそう
            // TODO オーナー名、認証されたユーザーに
            // TODO そもそも認証されたユーザーだけ使えるように
            Message = "Processing...";
            var file = files.First();

            var blob = await UploadService.UploadFile(file.Data, file.Name, true);
            UploadedUri = blob.Uri.ToString();
            var azureResult = await AzureImageDetectService.Detect(UploadedUri);
            AzureAdultScore = azureResult.AdultScore;
            AzureRacyScore = azureResult.RacyScore;

            var doc = ResultRepositoryService.BuildResult("koudenpa", blob, new IImageDetectResult[] { azureResult });
            await ResultRepositoryService.Put(doc);

            Message = "Complete!";
        }
        catch (Exception ex)
        {
            Message = ex.Message + " ... " + ex.StackTrace;
        }
    }
}
