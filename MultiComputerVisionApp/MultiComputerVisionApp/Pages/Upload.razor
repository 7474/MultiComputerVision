@using Microsoft.MobileBlazorBindings.Elements
@using Plugin.FilePicker
@using Plugin.FilePicker.Abstractions
@inject AppState AppState

@if (AppState.IsLogged)
{
    <Button Text="Upload" OnClick="OnUpload" />
}
else
{
    <Label Text="Please login." />
}
<ModalContainer @ref="resultDialog" OnClosed="OnDetailsClosed">
    <Result Doc="Doc" />
</ModalContainer>

@code{
        IResultDocument Doc { get; set; }
        ModalContainer resultDialog;

    protected override async Task OnInitializedAsync()
    {
        AppState.OnChange += () =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };
    }

    public void OnDetailsClosed()
    {
        resultDialog.FinishClosingDialog();
    }

    private async Task OnUpload()
    {
        var fileData = await CrossFilePicker.Current.PickFile();
        if (fileData == null)
        {
            return; // user canceled file picking
        }

        var fileName = fileData.FileName;
        var format = "image/jpeg";
        var imageDataUri = $"data:{format};base64,{Convert.ToBase64String(fileData.DataArray)}";

        var httpClient = AppState.AuthHttpClient;
        var res = await httpClient.PostAsJsonAsync("Api/Upload", new
        {
            Name = fileName,
            ImageDataUri = imageDataUri,
        });
        Doc = await res.Content.ReadFromJsonAsync<PlainResultDocument>(
            new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true, });

        resultDialog.ShowDialog();
    }
}